{"version":3,"file":"react-youtube-lite.cjs.production.min.js","sources":["../src/index.tsx","../node_modules/style-inject/dist/style-inject.es.js"],"sourcesContent":["// Dependencies\nimport * as React from 'react';\n\n// Styles\nimport './styles/styles.css';\n\nexport interface Props {\n  /**\n   * If `https://static.doubleclick.net` is enabled or not\n   *\n   * @default true\n   */\n  adNetwork?: boolean;\n  /**\n   * The URL of the video in any format like youtube.com or youtu.be\n   * we take care of get the ID of the video\n   */\n  url: string;\n  /**\n   * If the video URL contains a playlist or not\n   *\n   * @default false\n   */\n  playlist?: boolean;\n  /**\n   * The different quality to show the poster\n   * see: https://developers.google.com/youtube/v3/docs/thumbnails\n   * for more information\n   *\n   * @default \"hqdefault\"\n   */\n  poster?:\n    | 'maxresdefault'\n    | '0'\n    | '1'\n    | '2'\n    | '3'\n    | 'default'\n    | 'hqdefault'\n    | 'mqdefault'\n    | 'sddefault';\n  /**\n   * The `data-title` to insert in the `iframe`\n   *\n   * @default \"React YouTube Lite\"\n   */\n  title?: string;\n  /**\n   * If you use GDPR and don't want YouTube cookies enable this option\n   *\n   * @default false\n   */\n  noCookie?: boolean;\n  /**\n   * The class used to hide the elements when the iframe is already renderer\n   *\n   * @default \"lty-playbt\"\n   */\n  activatedClass?: string;\n  /**\n   * Default classes to put iframe responsive\n   *\n   * @default \"embed-reponsive-item\"\n   */\n  iframeClass?: string;\n  /**\n   * Class for youtube play button\n   *\n   * @default \"lty-playbtn\"\n   */\n  playerClass?: string;\n  /**\n   * Default classes to put container responsive\n   *\n   * @default \"ryt-lite embed-responsive\"\n   */\n  wrapperClass?: string;\n  /**\n   * Implements a `padding-bottom` to generate the size of the iframe\n   *\n   * - `aspect-ratio-none`: 0\n   * - `aspect-ratio-square`: 100%\n   * - `aspect-ratio-16/9`: 56.25%\n   * - `aspect-ratio-4/3`: 75%\n   * - `aspect-ratio-21/9`: 42.86%\n   *\n   * @default \"aspect-ratio-16/9\"\n   */\n  aspectRatio?:\n    | 'aspect-ratio-none'\n    | 'aspect-ratio-square'\n    | 'aspect-ratio-16/9'\n    | 'aspect-ratio-4/3'\n    | 'aspect-ratio-21/9';\n}\n\n/**\n * Returns the ID of the youtube video url provided\n *\n * @param url - The URL of the video (we take care of )\n */\nexport function getYoutubeId(url: string): string {\n  const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n  const match = url.match(regExp);\n\n  return match && match[7].length == 11 ? match[7] : '';\n}\n\n/**\n * Render faster YouTube videos to get a high score page render\n */\nexport const ReactYouTubeLite = ({\n  adNetwork = true,\n  url = '',\n  playlist = false,\n  poster = 'hqdefault',\n  title = 'React YouTube Lite',\n  noCookie = false,\n  activatedClass = 'lyt-activated',\n  iframeClass = 'embed-responsive-item',\n  playerClass = 'lty-playbtn',\n  wrapperClass = 'ryt-lite embed-responsive',\n  aspectRatio = 'aspect-ratio-16/9',\n}: Props): JSX.Element => {\n  const [preconnected, setPreconnected] = React.useState(false);\n  const [iframe, setIframe] = React.useState(false);\n  const videoId = encodeURIComponent(getYoutubeId(url));\n  const videoTitle = title;\n  const posterUrl = `https://i.ytimg.com/vi/${videoId}/${poster}.jpg`;\n  const ytUrl = noCookie\n    ? 'https://www.youtube-nocookie.com'\n    : 'https://www.youtube.com';\n  const iframeSrc = !playlist\n    ? `${ytUrl}/embed/${videoId}?autoplay=1`\n    : `${ytUrl}/embed/videoseries?list=${videoId}`;\n\n  /**\n   * Preload google `link` in header\n   */\n  const warmConnections = () => {\n    if (preconnected) return;\n\n    setPreconnected(true);\n  };\n\n  /**\n   * Set iframe as active if already active, return.\n   */\n  const addIframe = () => {\n    if (iframe) return;\n\n    setIframe(true);\n  };\n\n  return (\n    <>\n      <link rel=\"preload\" href={posterUrl} as=\"image\" />\n      <>\n        {preconnected && (\n          <>\n            <link rel=\"preconnect\" href={ytUrl} />\n            <link rel=\"preconnect\" href=\"https://www.google.com\" />\n            {adNetwork && (\n              <>\n                <link rel=\"preconnect\" href=\"https://static.doubleclick.net\" />\n                <link\n                  rel=\"preconnect\"\n                  href=\"https://googleads.g.doubleclick.net\"\n                />\n              </>\n            )}\n          </>\n        )}\n      </>\n      <div\n        onPointerOver={warmConnections}\n        onClick={addIframe}\n        className={`${wrapperClass} ${aspectRatio} ${\n          iframe ? activatedClass : ''\n        }`}\n        data-title={videoTitle}\n        style={{ backgroundImage: `url(${posterUrl})` }}\n      >\n        <div className={playerClass}></div>\n        {iframe && (\n          <iframe\n            className={iframeClass}\n            title={videoTitle}\n            width=\"560\"\n            height=\"315\"\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n            src={iframeSrc}\n          ></iframe>\n        )}\n      </div>\n    </>\n  );\n};\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n"],"names":["getYoutubeId","url","match","length","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","adNetwork","playlist","poster","title","noCookie","activatedClass","iframeClass","playerClass","wrapperClass","aspectRatio","React","preconnected","setPreconnected","iframe","setIframe","videoId","encodeURIComponent","videoTitle","posterUrl","ytUrl","iframeSrc","rel","href","as","onPointerOver","onClick","className","backgroundImage","width","height","frameBorder","allow","allowFullScreen","src"],"mappings":"oGAqGgBA,EAAaC,OAErBC,EAAQD,EAAIC,MADH,oFAGRA,GAA4B,IAAnBA,EAAM,GAAGC,OAAeD,EAAM,GAAK,ICzGrD,SAAqBE,EAAKC,QACX,IAARA,IAAiBA,EAAM,IAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAgC,oBAAbC,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,SACnCD,EAAME,KAAO,WAEI,QAAbN,GACEE,EAAKK,WACPL,EAAKM,aAAaJ,EAAOF,EAAKK,YAKhCL,EAAKO,YAAYL,GAGfA,EAAMM,WACRN,EAAMM,WAAWC,QAAUb,EAE3BM,EAAMK,YAAYR,SAASW,eAAed,q9DDwFd,oBAC9Be,UAAAA,oBACAlB,IAAAA,aAAM,SACNmB,SAAAA,oBACAC,OAAAA,aAAS,kBACTC,MAAAA,aAAQ,2BACRC,SAAAA,oBACAC,eAAAA,aAAiB,sBACjBC,YAAAA,aAAc,8BACdC,YAAAA,aAAc,oBACdC,aAAAA,aAAe,kCACfC,YAAAA,aAAc,wBAE0BC,YAAe,GAAhDC,OAAcC,SACOF,YAAe,GAApCG,OAAQC,OACTC,EAAUC,mBAAmBnC,EAAaC,IAC1CmC,EAAad,EACbe,4BAAsCH,MAAWb,SACjDiB,EAAQf,EACV,mCACA,0BACEgB,EAAanB,EAEZkB,6BAAgCJ,EADhCI,YAAeJ,uBAsBpBL,gCACEA,wBAAMW,IAAI,UAAUC,KAAMJ,EAAWK,GAAG,UACxCb,gCACGC,GACCD,gCACEA,wBAAMW,IAAI,aAAaC,KAAMH,IAC7BT,wBAAMW,IAAI,aAAaC,KAAK,2BAC3BtB,GACCU,gCACEA,wBAAMW,IAAI,aAAaC,KAAK,mCAC5BZ,wBACEW,IAAI,aACJC,KAAK,2CAOjBZ,uBACEc,cApCkB,WAClBb,GAEJC,GAAgB,IAkCZa,QA5BY,WACZZ,GAEJC,GAAU,IA0BNY,UAAclB,MAAgBC,OAC5BI,EAASR,EAAiB,iBAEhBY,EACZ1B,MAAO,CAAEoC,uBAAwBT,QAEjCR,uBAAKgB,UAAWnB,IACfM,GACCH,0BACEgB,UAAWpB,EACXH,MAAOc,EACPW,MAAM,MACNC,OAAO,MACPC,YAAY,IACZC,MAAM,0EACNC,mBACAC,IAAKb"}