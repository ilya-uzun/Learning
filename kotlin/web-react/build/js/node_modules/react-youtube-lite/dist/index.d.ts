/// <reference types="react" />
import './styles/styles.css';
export interface Props {
    /**
     * If `https://static.doubleclick.net` is enabled or not
     *
     * @default true
     */
    adNetwork?: boolean;
    /**
     * The URL of the video in any format like youtube.com or youtu.be
     * we take care of get the ID of the video
     */
    url: string;
    /**
     * If the video URL contains a playlist or not
     *
     * @default false
     */
    playlist?: boolean;
    /**
     * The different quality to show the poster
     * see: https://developers.google.com/youtube/v3/docs/thumbnails
     * for more information
     *
     * @default "hqdefault"
     */
    poster?: 'maxresdefault' | '0' | '1' | '2' | '3' | 'default' | 'hqdefault' | 'mqdefault' | 'sddefault';
    /**
     * The `data-title` to insert in the `iframe`
     *
     * @default "React YouTube Lite"
     */
    title?: string;
    /**
     * If you use GDPR and don't want YouTube cookies enable this option
     *
     * @default false
     */
    noCookie?: boolean;
    /**
     * The class used to hide the elements when the iframe is already renderer
     *
     * @default "lty-playbt"
     */
    activatedClass?: string;
    /**
     * Default classes to put iframe responsive
     *
     * @default "embed-reponsive-item"
     */
    iframeClass?: string;
    /**
     * Class for youtube play button
     *
     * @default "lty-playbtn"
     */
    playerClass?: string;
    /**
     * Default classes to put container responsive
     *
     * @default "ryt-lite embed-responsive"
     */
    wrapperClass?: string;
    /**
     * Implements a `padding-bottom` to generate the size of the iframe
     *
     * - `aspect-ratio-none`: 0
     * - `aspect-ratio-square`: 100%
     * - `aspect-ratio-16/9`: 56.25%
     * - `aspect-ratio-4/3`: 75%
     * - `aspect-ratio-21/9`: 42.86%
     *
     * @default "aspect-ratio-16/9"
     */
    aspectRatio?: 'aspect-ratio-none' | 'aspect-ratio-square' | 'aspect-ratio-16/9' | 'aspect-ratio-4/3' | 'aspect-ratio-21/9';
}
/**
 * Returns the ID of the youtube video url provided
 *
 * @param url - The URL of the video (we take care of )
 */
export declare function getYoutubeId(url: string): string;
/**
 * Render faster YouTube videos to get a high score page render
 */
export declare const ReactYouTubeLite: ({ adNetwork, url, playlist, poster, title, noCookie, activatedClass, iframeClass, playerClass, wrapperClass, aspectRatio, }: Props) => JSX.Element;
